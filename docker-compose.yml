version: '3'
services:
  postgres-keycloak:
    image: postgres:latest
    container_name: postgres-keycloak
    environment:
      POSTGRES_DB: content_maker
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d content_maker" ]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/
    ports:
      - 5432:5432
    networks:
      - keycloak_demo

  postgres-entity:
    image: postgres:latest
    container_name: postgres-entity
    environment:
      POSTGRES_DB: content_maker
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      SERVER_PORT: 1542
    expose:
      - "1542"
    networks:
      - keycloak_demo
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d content_maker -p 1542" ]
      interval: 30s
      timeout: 10s
      retries: 5
    command: ["postgres", "-c", "port=1542"]
    ports:
      - "1542:1542"

  backend:
    build:
      dockerfile: ./config/Dockerfile
      context: .
    container_name: backend
    hostname: backend
    depends_on:
      postgres-entity:
        condition: service_healthy
    networks:
      - keycloak_demo
    ports:
      - '8081:8081'

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
#    hostname: keycloak
    build:
      context: ./config
    command: start-dev --import-realm
    environment:
      KC_HOSTNAME: localhost
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-keycloak:5432/content_maker
      KC_DB_URL_HOST: postgres-keycloak
      KC_DB_URL_DATABASE: content_maker
      KC_DB_PASSWORD: password
      KC_DB_USERNAME: admin
      KC_DB_SCHEMA: public
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
    volumes:
      - type: bind
        source: config/realm-export.json
        target: /opt/keycloak/data/import/realm-export.json
        read_only: true
    ports:
      - 8080:8080
    depends_on:
      postgres-keycloak:
        condition: service_healthy
    networks:
      - keycloak_demo

networks:
  keycloak_demo: { }

volumes:
  postgres_data:
    driver: local
  oracle-data:
  oracle-backup:
  db-data:
  mongo_data:
